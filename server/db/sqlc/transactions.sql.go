// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: transactions.sql

package sqlc

import (
	"context"
	"time"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions(user_id, transaction_category, transaction_account, transaction_date, transaction_amount, transaction_notes, transaction_image_url, transaction_verified)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING transaction_id, user_id, transaction_category, transaction_account, transaction_date, transaction_amount, transaction_notes, transaction_image_url, transaction_verified
`

type CreateTransactionParams struct {
	UserID              int32     `json:"user_id"`
	TransactionCategory string    `json:"transaction_category"`
	TransactionAccount  string    `json:"transaction_account"`
	TransactionDate     time.Time `json:"transaction_date"`
	TransactionAmount   string    `json:"transaction_amount"`
	TransactionNotes    string    `json:"transaction_notes"`
	TransactionImageUrl string    `json:"transaction_image_url"`
	TransactionVerified bool      `json:"transaction_verified"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, createTransaction,
		arg.UserID,
		arg.TransactionCategory,
		arg.TransactionAccount,
		arg.TransactionDate,
		arg.TransactionAmount,
		arg.TransactionNotes,
		arg.TransactionImageUrl,
		arg.TransactionVerified,
	)
	var i Transaction
	err := row.Scan(
		&i.TransactionID,
		&i.UserID,
		&i.TransactionCategory,
		&i.TransactionAccount,
		&i.TransactionDate,
		&i.TransactionAmount,
		&i.TransactionNotes,
		&i.TransactionImageUrl,
		&i.TransactionVerified,
	)
	return i, err
}

const editTransaction = `-- name: EditTransaction :one
UPDATE transactions
SET 
    transaction_category = COALESCE($1, transaction_category),
    transaction_account = COALESCE($2, transaction_account),
    transaction_date = COALESCE($3, transaction_date),
    transaction_amount = COALESCE($4, transaction_amount),
    transaction_notes = COALESCE($5, transaction_notes),
    transaction_image_url = COALESCE($6, transaction_image_url),
    transaction_verified = COALESCE($7, transaction_verified)
WHERE transaction_id = $8
RETURNING transaction_id
`

type EditTransactionParams struct {
	TransactionCategory string    `json:"transaction_category"`
	TransactionAccount  string    `json:"transaction_account"`
	TransactionDate     time.Time `json:"transaction_date"`
	TransactionAmount   string    `json:"transaction_amount"`
	TransactionNotes    string    `json:"transaction_notes"`
	TransactionImageUrl string    `json:"transaction_image_url"`
	TransactionVerified bool      `json:"transaction_verified"`
	TransactionID       int64     `json:"transaction_id"`
}

func (q *Queries) EditTransaction(ctx context.Context, arg EditTransactionParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, editTransaction,
		arg.TransactionCategory,
		arg.TransactionAccount,
		arg.TransactionDate,
		arg.TransactionAmount,
		arg.TransactionNotes,
		arg.TransactionImageUrl,
		arg.TransactionVerified,
		arg.TransactionID,
	)
	var transaction_id int64
	err := row.Scan(&transaction_id)
	return transaction_id, err
}

const getTransactionsBetweenDate = `-- name: GetTransactionsBetweenDate :many
SELECT transaction_id, user_id, transaction_category, transaction_account, transaction_date, transaction_amount, transaction_notes, transaction_image_url, transaction_verified FROM transactions
WHERE user_id = $1
AND transaction_date BETWEEN $2 AND $3
`

type GetTransactionsBetweenDateParams struct {
	UserID            int32     `json:"user_id"`
	TransactionDate   time.Time `json:"transaction_date"`
	TransactionDate_2 time.Time `json:"transaction_date_2"`
}

func (q *Queries) GetTransactionsBetweenDate(ctx context.Context, arg GetTransactionsBetweenDateParams) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, getTransactionsBetweenDate, arg.UserID, arg.TransactionDate, arg.TransactionDate_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.TransactionID,
			&i.UserID,
			&i.TransactionCategory,
			&i.TransactionAccount,
			&i.TransactionDate,
			&i.TransactionAmount,
			&i.TransactionNotes,
			&i.TransactionImageUrl,
			&i.TransactionVerified,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransactionsByUserID = `-- name: GetTransactionsByUserID :many
SELECT transaction_id, user_id, transaction_category, transaction_account, transaction_date, transaction_amount, transaction_notes, transaction_image_url, transaction_verified
FROM transactions
WHERE user_id = $1
`

func (q *Queries) GetTransactionsByUserID(ctx context.Context, userID int32) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, getTransactionsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.TransactionID,
			&i.UserID,
			&i.TransactionCategory,
			&i.TransactionAccount,
			&i.TransactionDate,
			&i.TransactionAmount,
			&i.TransactionNotes,
			&i.TransactionImageUrl,
			&i.TransactionVerified,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
